/*
 *  Copyright 2015 Google Inc. All Rights Reserved.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * @fileoverview Generators for the Turtle Blockly demo on Android.
 * @author fenichel@google.com (Rachel Fenichel)
 */
'use strict';

// Extensions to Blockly's language and JavaScript generator.

Blockly.JavaScript['type_string'] = function(block) {
  var value_string = block.getFieldValue("STRING_TEXT");
  return ['"' + value_string + '"', Blockly.JavaScript.ORDER_ATOMIC];
};

Blockly.JavaScript['type_char'] = function(block) {
  var value_string = block.getFieldValue("CHAR_TEXT");
  return ["'" + value_string + "'", Blockly.JavaScript.ORDER_ATOMIC];
};
Blockly.JavaScript['type_var'] = function(block) {
  var value_string = block.getFieldValue("VAR_TEXT");
  return [value_string, Blockly.JavaScript.ORDER_ATOMIC];
};

Blockly.JavaScript['type_int'] = function(block) {
  var value_int = block.getFieldValue('INT_TEXT');
  return [value_int, Blockly.JavaScript.ORDER_ATOMIC];
};

Blockly.JavaScript['type_boolean'] = function(block) {
  var value_boolean = block.getFieldValue('BOOLEAN_TEXT');
  return [value_boolean, Blockly.JavaScript.ORDER_ATOMIC];
};




Blockly.JavaScript['ultrasonic_sensor_setup'] = function (block) {

   var trig_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
   var echo_num = Blockly.JavaScript.valueToCode(block, "PIN2", Blockly.JavaScript.ORDER_ATOMIC);
   Blockly.JavaScript.definitions_["trig_variable"] = "int trig = "+ trig_pin+";";
   Blockly.JavaScript.definitions_["echo_variable"] = "int echo = "+ echo_num+";";
   var code =   "pinMode("+trig_pin+", OUTPUT);\npinMode("+echo_num+", INPUT);\n";
   return code;
};

Blockly.JavaScript['ultrasonic_sensor'] = function (block) {

 var code =   "digitalWrite(trig, LOW);\n"+
                   "digitalWrite(echo, LOW);\n"+
                   "delayMicroseconds(2);\n"+
                   "digitalWrite(trig, HIGH);\n"+
                   "delayMicroseconds(10);\n"+
                   "digitalWrite(trig, LOW);\n\n"+
                   "unsigned long duration = pulseIn(echo, HIGH);\n"+
                   "float distance = duration / 29.0 / 2.0;\n"

   return code;
};
//
Blockly.JavaScript['ultrasonic_sensor_serial_println'] = function (block) {

   var code =   "Serial.print(distance);\n"+
                'Serial.println("cm");\n'+
                "delay(200);\n"

   return code;
};



Blockly.JavaScript['ultrasonic_sensors_read'] = function() {
    var code =   "distance"
  return [code, Blockly.JavaScript.ORDER_ATOMIC];
};


Blockly.JavaScript['serial_print'] = function(block) {
  var value_text = Blockly.JavaScript.valueToCode(block, "text", Blockly.JavaScript.ORDER_ATOMIC);
  var code = "Serial.print("+value_text+");\n";
  return code;
};

Blockly.JavaScript['serial_println'] = function(block) {
  var value_text = Blockly.JavaScript.valueToCode(block, "STRING", Blockly.JavaScript.ORDER_ATOMIC);

  var code = "Serial.println("+value_text+");\n";
  return code;
};

Blockly.JavaScript['serial_println_int'] = function(block) {
  var value_num = Blockly.JavaScript.valueToCode(block, "INT", Blockly.JavaScript.ORDER_ATOMIC);
  var code = "Serial.println("+value_num+");\n";
  return code;
};

Blockly.JavaScript['serial_println_boolean'] = function(block) {
  var value_num = Blockly.JavaScript.valueToCode(block, "BOOLEAN", Blockly.JavaScript.ORDER_ATOMIC);
  var code = "Serial.println("+value_num+");\n";
  return code;
};

Blockly.JavaScript['temperature_sensor'] = function(block) {
   var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);

     Blockly.JavaScript.definitions_["includelib"] = "#include <OneWire.h>";
     Blockly.JavaScript.definitions_["includelib2"] = "#include <DallasTemperature.h>";
     Blockly.JavaScript.definitions_["definelcdpins"] = "#define TEMP_18B20 "+value_pin;

     Blockly.JavaScript.definitions_["call_libs"] = "OneWire oneWire(TEMP_18B20);\nDallasTemperature sensors(&oneWire);";

   var code = "sensors.requestTemperatures();\n"+
                 "float temp_18b20 = sensors.getTempCByIndex(0);\n";
   return code;
 };

 Blockly.JavaScript['read_temperature_sensor'] = function(block) {
    var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);


    var code = "temp_18b20"
    return [code, Blockly.JavaScript.ORDER_ATOMIC];
  };


Blockly.JavaScript['turtle_move_internal'] = function(block) {
  // Generate JavaScript for moving forward or backwards.
  var value = block.getFieldValue('VALUE');
  return 'Turtle.' + block.getFieldValue('DIR') +
      '(' + value + ', \'block_id_' + block.id + '\');\n';
};


Blockly.JavaScript['turtle_color_internal'] = function(block) {
  // Generate JavaScript for moving forward or backwards.

  return "";
};

Blockly.JavaScript['turtle_jikco_internal'] = function(block) {
  // Generate JavaScript for moving forward or backwards.
  var value = block.getFieldValue('DIR');
  var color_text = block.getFieldValue('COL');

  var color = "";

  if(color_text == 'Red'){
    color = "0xff0000";
  }else if(color_text == 'Orange'){
    color = "0xff8c00";
  }else if(color_text == 'Yellow'){
    color = "0xffff00";
  }else if(color_text == 'Green'){
    color = "0x008000";
  }else if(color_text == 'Blue'){
    color = "0x0000ff";
  }else if(color_text == 'Brown'){
    color = "0x964B00";
  }else if(color_text == 'Purple'){
    color = "0x800080";
  }else if(color_text == 'Off'){
    color = "0x000000";
  }else if(color_text == 'White'){
    color = "0xffffff";
  }



  var code ="";
  const checked = value.split(',');

  if(checked[0] == "1"){
  code += "neo.setPixelColor(3,"+color+");\n";
  }

  if(checked[1]  == "1"){
    code += "neo.setPixelColor(4,"+color+");\n";
  }

  if(checked[2]  == "1"){
    code += "neo.setPixelColor(5,"+color+");\n";
  }

  if(checked[3] == "1"){
    code += "neo.setPixelColor(9,"+color+");\n";
  }

  if(checked[4] == "1"){
     code += "neo.setPixelColor(10,"+color+");\n";
  }
    if(checked[5] == "1"){
       code += "neo.setPixelColor(11,"+color+");\n";
    }
    if(checked[6] == "1"){
       code += "neo.setPixelColor(0,"+color+");\n";
    }
    if(checked[7] == "1"){
       code += "neo.setPixelColor(1,"+color+");\n";
    }
    if(checked[8] == "1"){
       code += "neo.setPixelColor(2,"+color+");\n";
    }
  if(checked[9] == "1"){
     code += "neo.setPixelColor(6,"+color+");\n";
  }

  if(checked[10] == "1"){
     code += "neo.setPixelColor(7,"+color+");\n";
  }

  if(checked[11] == "1"){
    code += "neo.setPixelColor(8,"+color+");\n";
  }

   code += "\nneo.show();\n";

  return code;
};

Blockly.JavaScript['turtle_turn_internal'] = function(block) {
  // Generate JavaScript for turning left or right.
  var value = block.getFieldValue('VALUE');
  return 'Turtle.' + block.getFieldValue('DIR') +
      '(' + value + ', \'block_id_' + block.id + '\');\n';
};

Blockly.JavaScript['set_leds'] = function (block) {
 var value1 = block.getFieldValue('VALUE1');
 var value2 = block.getFieldValue('VALUE2');``````````````````````````
 var value3 = block.getFieldValue('VALUE3');

    return 'pinMode(11, OUTPUT);\npinMode(12, OUTPUT);\npinMode(13, OUTPUT);\ndigitalWrite(11,'+value1+');\ndigitalWrite(12,'+value2+');\ndigitalWrite(13,'+value3+');\n';
};

Blockly.JavaScript['pinMode'] = function (block) {
   var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
   var value_num = Blockly.JavaScript.valueToCode(block, "VALUE1", Blockly.JavaScript.ORDER_ATOMIC);
   var code = "\npinMode(" + value_pin + ", " + value_num + ");\n";
   return code;
};


Blockly.JavaScript['read_stt'] = function (block) {
  var code = '"readSTT"'
  return [code, Blockly.JavaScript.ORDER_ATOMIC];
};


Blockly.JavaScript['pluse_sensor'] = function (block) {
   var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);


    Blockly.JavaScript.definitions_["definefadepin"] = "#define USE_ARDUINO_INTERRUPTS true\n#include <PulseSensorPlayground.h>\n\nconst int PulseWire = "+value_pin+";\nconst int LED13 = 13; \nint Threshold = 550;\n\nPulseSensorPlayground pulseSensor;"
    Blockly.JavaScript.setups_['setup_pin_mode_1'] =  "Serial.begin(9600);\npulseSensor.analogInput(PulseWire);\npulseSensor.blinkOnPulse(LED13);\npulseSensor.setThreshold(Threshold);\n"+
    " if (pulseSensor.begin()) {\nSerial.println("+'"'+"We created a pulseSensor Object !"+'"'+");\n}\n";

   var code = " int myBPM = pulseSensor.getBeatsPerMinute(); \n"+
   "if (pulseSensor.sawStartOfBeat()){\n"+
//                      "     Serial.print("+'"'+"BPM: "+'"'+"); \n"+
                      "     Serial.println(myBPM); \n}"+
                      "\ndelay(20);\n"
   return code;
};




Blockly.JavaScript['serial_write'] = function (block) {
   var code = "Serial.write("+'"'+"hi"+'"'+");\n";

     return code;
};


Blockly.JavaScript['set_led'] = function (block) {
     var value1 = block.getFieldValue('VALUE1');
      var value_pin = block.getFieldValue('PIN');

//    var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);

    return '\npinMode(13,'+value1+');\n';
};

Blockly.JavaScript['dc_motor'] = function(block) {
  // Generate JavaScript for setting the width.
  var channel = parseInt(block.getFieldValue('channel'));
  var speed = parseInt(Blockly.JavaScript.valueToCode(block, 'speed',Blockly.JavaScript.ORDER_NONE) || '255');
   if( speed > 255 || speed < -255) {
     return '!!alert!!DC motor : speed should be between -255 and 255!!\n';
   }

    var code;
    Blockly.JavaScript.setups_['setup_pin_mode_4'] =  "\npinMode(4, OUTPUT);";
    Blockly.JavaScript.setups_['setup_pin_mode_2'] = "\npinMode(2, OUTPUT);";
    Blockly.JavaScript.setups_['setup_pin_mode_7'] = "\npinMode(7, OUTPUT);";
    Blockly.JavaScript.setups_['digital_write_7'] = "\ndigitalWrite(7,LOW);";
    Blockly.JavaScript.setups_['digital_write_3'] = "\ndigitalWrite(2,HIGH);";
    Blockly.JavaScript.setups_['setup_pin_mode_6'] = "\npinMode(6, OUTPUT);";

    if ( channel == 1) {
  	  if (speed >= 0 )
          code = "digitalWrite(4,LOW);\n";
  	  else
  		code = "digitalWrite(4,HIGH);\n";
      code += "analogWrite(3,"+speed+");\n";
    }
    else if(channel == 2) {
  	   if (speed >= 0 )
          code = "digitalWrite(6,LOW);\n";
  	  else
  		code = "digitalWrite(6,HIGH);\n";
      code += "analogWrite(5,"+speed+");\n";
    }
    return code;
};

Blockly.JavaScript['lcd'] = function (block) {
  var text = Blockly.JavaScript.valueToCode(block, 'text', Blockly.JavaScript.ORDER_NONE) || '255';
  var line_number = block.getFieldValue('line_number');
  var character_number = parseInt(Blockly.JavaScript.valueToCode(block, 'character_number', Blockly.JavaScript.ORDER_NONE) || '0');
  // Assemble JavaScript into code variable.
  //import lcd
  //return 'text-'+text+'line-'+line_number+'char-'+character_number+'\n';
  if( character_number < 0  || character_number > 15 ) {
    return '!!alert!!LCD : character should be between 0 to 15!!\n';
  }
  Blockly.JavaScript.setups_["%1"] = "\n lcd.begin(16, 2);";
  Blockly.JavaScript.definitions_["includelib"] = "#include <LiquidCrystal.h>";
  Blockly.JavaScript.definitions_["definelcdpins"] = "LiquidCrystal lcd(8,9,10,11,12,13);"
  var code = 'lcd.setCursor(' + character_number + ',' + line_number + ');\n';
  code = code + 'lcd.print(' + text + ');\n'
  return code;
};


Blockly.JavaScript['lcd_I2C'] = function (block) {
  var text = Blockly.JavaScript.valueToCode(block, 'text', Blockly.JavaScript.ORDER_NONE) || '255';
  var line_number = block.getFieldValue('line_number');
  var character_number = parseInt(Blockly.JavaScript.valueToCode(block, 'character_number', Blockly.JavaScript.ORDER_NONE) || '0');

  Blockly.JavaScript.setups_["%1"] = '\nlcd.init();\nlcd.backlight();\n';
  Blockly.JavaScript.definitions_["includelib1"] = "#include <Arduino.h>";
  Blockly.JavaScript.definitions_["includelib2"] = "#include <LiquidCrystal_I2C.h>";
  Blockly.JavaScript.definitions_["definelcdpins"] = "LiquidCrystal_I2C lcd(0x27, 16, 2);"

  var code = 'lcd.setCursor(' + character_number + ',' + line_number + ');\n'+'lcd.print(' + text + ');\n'
  return code;
};

Blockly.JavaScript['clear_lcd'] = function (block) {
  //  Assemble JavaScript into code variable.
  var code = 'lcd.clear();\n';
  return code;
};

Blockly.JavaScript['bluetooth_sensor'] = function (block) {
  var baudrate = Blockly.JavaScript.valueToCode(block, 'baud', Blockly.JavaScript.ORDER_NONE) || '255';
  //define bluetooth settings
  Blockly.JavaScript.setups_['setup_bluetooth'] = "\n Serial.begin("+baudrate+");";
  Blockly.JavaScript.definitions_['define_bluetooth'] = "char readBluetooth()\n{\n while(Serial.available())\n {\n char inChar = (char)Serial.read();\n return inChar;\n}\n}\n";
    var code = 'readBluetooth()';

    return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['sonar_sensor'] = function (block) {
  var value_trig = Blockly.JavaScript.valueToCode(block, 'trig', Blockly.JavaScript.ORDER_NONE);
  var value_echo = Blockly.JavaScript.valueToCode(block, 'echo', Blockly.JavaScript.ORDER_NONE);
  //define sonar settings
  Blockly.JavaScript.definitions_['define_sonar'] = "int readUltrasonic_cm(int trigPin, int echoPin)\n{ \n pinMode(trigPin, OUTPUT);\n digitalWrite(trigPin, LOW);\n delayMicroseconds(2);\n digitalWrite(trigPin, HIGH);\n delayMicroseconds(10);\n digitalWrite(trigPin, LOW);\n pinMode(echoPin, INPUT);\n return pulseIn(echoPin, HIGH)/ 29 / 2;\n}\n";
  //  Assemble Arduino into code variable.
  var code = "readUltrasonic_cm("+value_trig+","+value_echo+")";

  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['remote_sensor'] = function (block) {
  var value_tsop = Blockly.JavaScript.valueToCode(block, 'tsop', Blockly.JavaScript.ORDER_NONE);
  Blockly.JavaScript.definitions_['define_remote'] = "int remote(int pinNumber)\n{\nint value = 0;\nint time = pulseIn(pinNumber,LOW);\n if(time>2000)\n{\nfor(int counter1=0;counter1<12;counter1++)\n{\nif(pulseIn(pinNumber,LOW)>1000)\n{\nvalue = value + (1<< counter1);\n }\n}\n}\n return value;\n}\n";
  var code = "remote("+value_tsop+")";
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['servo'] = function (block) {
  var value_channel = Blockly.JavaScript.valueToCode(block, 'channel', Blockly.JavaScript.ORDER_ATOMIC);
  var value_angle = Blockly.JavaScript.valueToCode(block, 'angle', Blockly.JavaScript.ORDER_ATOMIC);

  //define sonar settings
  Blockly.JavaScript.definitions_['define_servo_h'] = "#include <Servo.h>\n";
  Blockly.JavaScript.definitions_['define_servo_' + value_channel] = "Servo servo" + value_channel + ";\n";

  Blockly.JavaScript.setups_['define_servo' + value_channel] = '\n servo' + value_channel + '.attach('+value_channel+');\n';
  if( (value_angle < 0 ) || (value_angle > 180 )) {
     return '!!alert!!Servo : angle should be between 0 and 180!!\n';
  }
    // Assemble JavaScript into code variable.
    var code = 'servo' + value_channel + '.write(' + value_angle + ');\n';
    return code;
 };

 Blockly.JavaScript['neo_pixel'] = function (block) {
   var value_channel = Blockly.JavaScript.valueToCode(block, 'channel', Blockly.JavaScript.ORDER_ATOMIC);
   var value_angle = Blockly.JavaScript.valueToCode(block, 'angle', Blockly.JavaScript.ORDER_ATOMIC);
//   var neo_name = Blockly.JavaScript.valueToCode(block, 'angle', Blockly.JavaScript.ORDER_ATOMIC);

   //define sonar settings
   Blockly.JavaScript.definitions_['define_neo_h'] = "#include <Adafruit_NeoPixel.h>\n";
   Blockly.JavaScript.definitions_['define_neo_' + value_channel] = "Adafruit_NeoPixel neo"+" = Adafruit_NeoPixel(" + value_channel + ","+value_angle+", NEO_GRB + NEO_KHZ800)"+";\n";

     var code = "";
     return code;
  };

   Blockly.JavaScript['neo_pixel_setup'] = function (block) {


       Blockly.JavaScript.setups_['define_neo_setup'] =  " neo.begin();"+
                     "\nneo.setBrightness(20);"+
                     "\nneo.setPixelColor(0, 0xff0000);"+
                     "\nneo.setPixelColor(2, 0xff0000);"+
                     "\nneo.setPixelColor(4, 0xff0000);"+
                     "\nneo.setPixelColor(6, 0xff0000);"+
                     "\nneo.setPixelColor(8, 0xff0000);"+
                     "\nneo.setPixelColor(10, 0xff0000);"+
                     "\nneo.show();"+
                     "\nneo.setPixelColor(0, 0xff0000);"+
                     "\nneo.setPixelColor(2, 0xff0000);"+
                     "\nneo.setPixelColor(4, 0xff0000);"+
                     "\nneo.setPixelColor(6, 0xff0000);"+
                     "\nneo.setPixelColor(8, 0xff0000);"+
                     "\nneo.setPixelColor(10, 0xff0000);"+
                     "\nneo.show();"+
                     "\nneo.clear();"+
                     "\nneo.show();\n";

         var code = ""

         return code;
      };


//  Blockly.JavaScript['serial_read_test'] = function (block) {
//
//
//     var code = "if(Serial.available() > 0){\n"}+
//     "byte actionCode = Serial.read();\n"+
//     "switch (actionCode) { \n"+
//     "case 1 : \n"+
//     "Serial.println("+'"'+"apple"+'"'+");\nbreak;\n"+
//     "case 2 : \n"+
//     "Serial.println("+'"'+"apple"+'"'+");\nbreak;\n"+
//     "case 3 : \n"+
//     "Serial.println("+'"'+"apple"+'"'+");\nbreak;\n"+
//     "}\n"+
//     "}"
//
//       return code;
//    };



        Blockly.JavaScript['serial_available'] = function (block) {

               var code = "Serial.available()"

           return [code, Blockly.JavaScript.ORDER_ATOMIC];
        };

        Blockly.JavaScript['serial_read_test'] = function (block) {

               var code =
               "if(Serial.available() > 0){\n"+
               "char actionCode = Serial.read();\n"+
               "Serial.println(actionCode);\n"+
                  "    switch (actionCode) { \n"+
                              "    case '1' : \n"+
                              "    digitalWrite(13,HIGH);\n"+
                              "    Serial.println("+'"'+"apple"+'"'+");\n  break;\n"+
                              "    case '2' : \n"+
                              "    digitalWrite(13,HIGH);\n"+
                              "    Serial.println("+'"'+"banana"+'"'+");\n  break;\n"+
                              "    case '3' : \n"+
                              "    digitalWrite(13,LOW);\n"+
                              "    Serial.println("+'"'+"grape"+'"'+");\n  break;\n"+
                              "    }\n"+

               "}\n"

           return code;
        };

          Blockly.JavaScript['serial_read'] = function (block) {

                       var code = "Serial.read()"

                   return [code, Blockly.JavaScript.ORDER_ATOMIC];
                };

                          Blockly.JavaScript['serial_readString'] = function (block) {

                                       var code = "Serial.readString()"

                                   return [code, Blockly.JavaScript.ORDER_ATOMIC];
                                };

        Blockly.JavaScript['neo_pixel_begin'] = function (block) {

           var code = "neo.begin();\n"

           return code;
        };

      Blockly.JavaScript['neo_pixel_brightness'] = function (block) {
       var value_angle = Blockly.JavaScript.valueToCode(block, 'angle', Blockly.JavaScript.ORDER_ATOMIC);

           var code = "neo.setBrightness("+ value_angle + ");\n"

           return code;
        };

  Blockly.JavaScript['face_list'] = function() {
    var dropdown_value = this.getFieldValue('face');
    return [dropdown_value, Blockly.JavaScript.ORDER_ATOMIC];
  };

  Blockly.JavaScript['color_list'] = function() {
      var dropdown_value = this.getFieldValue('color');
      return [dropdown_value, Blockly.JavaScript.ORDER_ATOMIC];
  };

Blockly.JavaScript['neo_pixel_custom'] = function (block) {
   var value_face = Blockly.JavaScript.valueToCode(block, 'face', Blockly.JavaScript.ORDER_ATOMIC);
   var value_color = Blockly.JavaScript.valueToCode(block, 'color', Blockly.JavaScript.ORDER_ATOMIC);

   var code = "";
   var code_text = "";
   var set_color = "";
   var light_num = [];

   switch(value_color) {
     case 'Red' : set_color = "0xff0000"; break;
     case 'Orange' : set_color = "0xff8c00"; break;
     case 'Yellow' : set_color = "0xffff00"; break;
     case 'Green' : set_color = "0x008000"; break;
     case 'Blue' : set_color = "0x0000ff"; break;
     case 'Brown' : set_color = "0x964B00"; break;
     case 'Purple' : set_color = "0x800080"; break;
     case 'Off' : set_color = "0x000000"; break;
     case 'White' : set_color = "0xffffff"; break;
   }

   switch(value_face) {
     case 'happy' : light_num = ['0', '2', '4', '6', '8', '10']; break;
     case 'sad' : light_num = ['1', '3', '4', '5', '7', '9', '10', '11']; break;
     case 'sulk' : light_num = ['0', '1', '2', '6', '7', '8']; break;
     case 'thrilling' : light_num = ['1', '3', '5', '7', '9', '11']; break;
     case 'amazed' : light_num = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']; break;
     case 'sleepy' : light_num = ['0', '1', '2', '3', '5', '6', '7', '8', '9', '11']; break;
     case 'smile' : light_num = ['0', '2', '3', '4', '5', '6', '8', '9', '10', '11']; break;
     case 'vacant' : light_num = ['0', '1', '3', '4', '7', '8', '10', '11']; break;
     case 'upset' : light_num = ['2', '3', '4', '6', '10', '11']; break;
   }

   for(var i=0; i<light_num.length; i++) {
     code_text = code_text + "\nneo.setPixelColor(" + light_num[i] + "," + set_color + ");";
   }

   code = "\nneo.clear();"+
          "\nneo.show();" +
          code_text +
          "\nneo.show();\n";

   return code;
  };

 Blockly.JavaScript['neo_pixel_color'] = function (block) {
   var value_channel = Blockly.JavaScript.valueToCode(block, 'channel', Blockly.JavaScript.ORDER_ATOMIC);
   var value_angle = Blockly.JavaScript.valueToCode(block, 'angle', Blockly.JavaScript.ORDER_ATOMIC);
//   var neo_name = Blockly.JavaScript.valueToCode(block, 'angle', Blockly.JavaScript.ORDER_ATOMIC);

     var code = "neo.setPixelColor("+value_channel+","+"0xff0000);\n";
     return code;
  };

   Blockly.JavaScript['neo_pixel_show'] = function (block) {
  //   var neo_name = Blockly.JavaScript.valueToCode(block, 'angle', Blockly.JavaScript.ORDER_ATOMIC);

       var code = "neo.show();\n";
       return code;
    };

    //neo_pixel_clear
    Blockly.JavaScript['neo_pixel_clear'] = function (block) {
      //   var neo_name = Blockly.JavaScript.valueToCode(block, 'angle', Blockly.JavaScript.ORDER_ATOMIC);

           var code = "neo.clear();\n";
           return code;
        };

Blockly.JavaScript['logic_calculation'] = function(a) {
    var b = {
            EQ: "+",
            LT: "-",
            GT: "*",
            GTE: "/"
        }[a.getFieldValue("OP")],
        c = "==" == b || "!=" == b ? Blockly.JavaScript.ORDER_EQUALITY : Blockly.JavaScript.ORDER_RELATIONAL,
        d = Blockly.JavaScript.valueToCode(a, "A", c) || "0";
    a = Blockly.JavaScript.valueToCode(a, "B", c) || "0";
    return [d + " " + b + " " + a, c]
};

 Blockly.JavaScript['tone_notone'] = function (block) {
   var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
   var value_num = Blockly.JavaScript.valueToCode(block, "NUM", Blockly.JavaScript.ORDER_ATOMIC);
   var delay_time = Blockly.JavaScript.valueToCode(block, 'DELAY_TIME', Blockly.JavaScript.ORDER_ATOMIC) || '1000'

     // Assemble JavaScript into code variable.
     var code = "tone(" + value_pin + ", " + value_num + ");\ndelay("+ delay_time + ');\n'+"noTone("+value_pin+");\n";
     return code;
  };

 Blockly.JavaScript['DHT11'] = function (block) {
   var value_channel = Blockly.JavaScript.valueToCode(block, 'channel', Blockly.JavaScript.ORDER_ATOMIC);
//   var value_angle = Blockly.JavaScript.valueToCode(block, 'angle', Blockly.JavaScript.ORDER_ATOMIC);

   //define sonar settings
   Blockly.JavaScript.definitions_['define_dht_h'] = "#include \"DHT.h\"\n";
//   Blockly.JavaScript.definitions_['define_dht_type_h'] = "#include <DHT.h>\n";
   Blockly.JavaScript.definitions_['define_dht_' + value_channel] = "DHT dht(" + value_channel +", DHT11);\n";
    Blockly.JavaScript.setups_['setup_dht_' + value_channel] =  "\ndht.begin();";

//   Blockly.JavaScript.setups_['define_servo' + value_channel] = '\n servo' + value_channel + '.attach('+value_channel+');\n';
//   if( (value_angle < 0 ) || (value_angle > 180 )) {
//      return '!!alert!!Servo : angle should be between 0 and 180!!\n';
//   }
//     // Assemble JavaScript into code variable.
//     var code = 'dht.readTemperature()' + '\n';
     return '';
  };

   Blockly.JavaScript['read_temp'] = function (block) {

  //   Blockly.JavaScript.setups_['define_servo' + value_channel] = '\n servo' + value_channel + '.attach('+value_channel+');\n';
  //   if( (value_angle < 0 ) || (value_angle > 180 )) {
  //      return '!!alert!!Servo : angle should be between 0 and 180!!\n';
  //   }
  //     // Assemble JavaScript into code variable.
       var code = 'dht.readTemperature()';
       return [code, Blockly.JavaScript.ORDER_ATOMIC];
    };

   Blockly.JavaScript['read_humidity'] = function (block) {
//     var value_channel = Blockly.JavaScript.valueToCode(block, 'channel', Blockly.JavaScript.ORDER_ATOMIC);
  //   var value_angle = Blockly.JavaScript.valueToCode(block, 'angle', Blockly.JavaScript.ORDER_ATOMIC);

     //define sonar settings
//     Blockly.JavaScript.definitions_['define_dht_h'] = "#include <DHT.h>\n";
//  //   Blockly.JavaScript.definitions_['define_dht_type_h'] = "#include <DHT.h>\n";
//     Blockly.JavaScript.definitions_['define_dht_' + value_channel] = "DHT dht(" + value_channel +", DHT11);\n";

  //   Blockly.JavaScript.setups_['define_servo' + value_channel] = '\n servo' + value_channel + '.attach('+value_channel+');\n';
  //   if( (value_angle < 0 ) || (value_angle > 180 )) {
  //      return '!!alert!!Servo : angle should be between 0 and 180!!\n';
  //   }
  //     // Assemble JavaScript into code variable.
       var code = 'dht.readHumidity()';
       return [code, Blockly.JavaScript.ORDER_ATOMIC];
    };

    Blockly.JavaScript['base_type_list'] = function() {
      var dropdown_value = this.getFieldValue('TYPE');
      return [dropdown_value, Blockly.JavaScript.ORDER_ATOMIC];
    };


    Blockly.JavaScript['type_date'] = function(block) {
      var value_string = block.getFieldValue("date");
      return [value_string, Blockly.JavaScript.ORDER_ATOMIC];
    };

        Blockly.JavaScript['base_time_list'] = function(block) {
          var value_string = block.getFieldValue("TIME");
          return [value_string, Blockly.JavaScript.ORDER_ATOMIC];
        };

                Blockly.JavaScript['base_day_list'] = function(block) {
                  var value_string = block.getFieldValue("DAY");
                  return [value_string, Blockly.JavaScript.ORDER_ATOMIC];
                };


        Blockly.JavaScript['get_weather_variables'] = function(block) {
//        var day = Blockly.JavaScript.valueToCode(block, 'DAY', Blockly.JavaScript.ORDER_ATOMIC);
//        var type = Blockly.JavaScript.valueToCode(block, 'TYPE', Blockly.JavaScript.ORDER_ATOMIC);
            var day = Blockly.JavaScript.valueToCode(block, 'DAY', Blockly.JavaScript.ORDER_ATOMIC);
                  var type = Blockly.JavaScript.valueToCode(block, 'TYPE', Blockly.JavaScript.ORDER_ATOMIC);
                  var variable = ""
                    if(day == "그저께"){
                    variable = "by_"
                    }else if(day == "어제"){
                    variable = "y_"
                    }else if(day == "오늘"){
                    variable = "t_"
                    }

                    if(type == "기온"){
                    variable += "TMP"
                    }else if(type == "강수량"){
                    variable += "PCP"
                    }else if(type == "강수형태"){
                    variable += "PTY"
                    }else if(type == "습도"){
                    variable += "REH"
                    }else if(type == "풍속"){
                    variable += "WSD"
                    }else if(type == "하늘상태"){
                    variable += "SKY"
                    }

          return [variable, Blockly.JavaScript.ORDER_ATOMIC];
        };

     Blockly.JavaScript['get_weather'] = function(block) {

        var value_date = Blockly.JavaScript.valueToCode(block, "DATEE", Blockly.JavaScript.ORDER_ATOMIC);
        var value_time = Blockly.JavaScript.valueToCode(block, "TIME", Blockly.JavaScript.ORDER_ATOMIC);
        var value_local = Blockly.JavaScript.valueToCode(block, "LOCAL", Blockly.JavaScript.ORDER_ATOMIC);
        var value_type = Blockly.JavaScript.valueToCode(block, "TYPE", Blockly.JavaScript.ORDER_ATOMIC);;

        Blockly.JavaScript.definitions_["weather_check"] = "boolean check_1 = true;"
        Blockly.JavaScript.definitions_['digital_read'] = "String getWeatherData(String date, String time, String local, String type){\nSerial.println(\"in!\");\n check_1= true;\n"
        +"while(check_1){\nif(Serial.available()){\nString inString = Serial.readStringUntil('\\n');\nif(inString.indexOf(\"*END*\") > -1){ "+"inString = inString.substring(0, inString.indexOf(\"*END*\"));\nSerial.println(inString); check_1 = false;\n\nreturn inString;\n}Serial.println(inString);\n}\n}\n}";

        var code = "getWeatherData(" +'"'+ value_date +'"'+ ", " +'"'+ value_time +'"'+ ", " +'"'+ value_local +'"'+", " +'"'+ value_type +'"'+ ");\n\n";
        return [code, Blockly.JavaScript.ORDER_ATOMIC];
      };


      Blockly.JavaScript['oled_block'] = function(block) {
      var weather = block.getFieldValue('weather');

       Blockly.JavaScript.definitions_["weather_check"] =`
      #include <Wire.h>
      #include <Adafruit_GFX.h>
      #include <Adafruit_SSD1306.h>
      #define SCREEN_WIDTH 128
      #define SCREEN_HEIGHT 64
      #define OLED_RESET     4
       Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

      const unsigned char suuny [] PROGMEM = {
        0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1f, 0x00, 0x3f, 0xfc, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x00, 0xff, 0xff, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x03, 0xff, 0xff, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xfc, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1f, 0xc0, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xf0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xf0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xe0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7f, 0x07, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x87, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x87, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7f, 0x07, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xe0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xf0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xf0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1f, 0xc0, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xfc, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x03, 0xff, 0xff, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x00, 0xff, 0xff, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1f, 0x00, 0x3f, 0xfc, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      };
      // '[크기변환]구름많음', 128x64px
      const unsigned char cloudy [] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1c, 0x03, 0xc0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1e, 0x03, 0x80, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1e, 0x01, 0x80, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1c, 0x00, 0x7f, 0xfe, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3e, 0x01, 0xff, 0xff, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0x03, 0xfc, 0x7f, 0x81, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1f, 0x07, 0xe0, 0x0f, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x06, 0x0f, 0x80, 0x03, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1f, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x3c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xf1, 0xff, 0x00, 0x00, 0x3c, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1f, 0x80, 0x1f, 0x80, 0x00, 0x3c, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3f, 0x00, 0x0f, 0x80, 0x00, 0x3c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3c, 0x00, 0x07, 0xc0, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x78, 0x00, 0x03, 0xe0, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x78, 0x00, 0x01, 0xe0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x01, 0xf0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x00, 0xff, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xe0, 0x00, 0x00, 0xff, 0xc3, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xe0, 0x00, 0x00, 0x7f, 0xef, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0x81, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xe0, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7c, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3f, 0x80, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      };
      // '[크기변환]흐림', 128x64px
      const unsigned char fog [] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1f, 0xc0, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x3f, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x7c, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xfc, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xff, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xfe, 0x07, 0xf0, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xf8, 0x01, 0xf8, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xe0, 0x00, 0x7c, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0xc0, 0x00, 0x3e, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x1f, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x7f, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xff, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xfe, 0x00, 0x00, 0x07, 0xff, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0xfe, 0x00, 0x00, 0x07, 0xff, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3e, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7c, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7c, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      };
      // '[크기변환]비', 128x64px
      const unsigned char rain [] PROGMEM = {
        0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xfe, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xf0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xe0, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0xc0, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x80, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1f, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1e, 0x00, 0x00, 0x07, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x00, 0x00, 0xc0, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x80, 0x01, 0xe0, 0x00, 0x78, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x80, 0x01, 0xe0, 0x00, 0x78, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x80, 0x03, 0xe0, 0x00, 0xf0, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x00, 0x03, 0xc0, 0x00, 0xf0, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0x00, 0x07, 0xc0, 0x01, 0xe0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1e, 0x00, 0x07, 0x80, 0x01, 0xe0, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3e, 0x0c, 0x0f, 0x83, 0x03, 0xc0, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3c, 0x1e, 0x0f, 0x07, 0x83, 0xc1, 0xe1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7c, 0x1e, 0x1f, 0x07, 0x87, 0x83, 0xe1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x3e, 0x1e, 0x0f, 0x07, 0x83, 0xc1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x30, 0x3c, 0x0c, 0x0f, 0x03, 0x07, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x7c, 0x00, 0x1e, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x78, 0x00, 0x1e, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf8, 0x00, 0x3c, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x3c, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xf0, 0x00, 0x78, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xe0, 0x00, 0x78, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xc0, 0x00, 0x30, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      };
      // '[크기변환]눈,비', 128x64px
      const unsigned char rainsnow [] PROGMEM = {
        0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xfc, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0xf8, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0xe0, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0xe0, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0xc0, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x7f, 0xc0, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xff, 0x80, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0xff, 0x80, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xff, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3e, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3c, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x00, 0x03, 0xc0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x00, 0x03, 0xc0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x00, 0x01, 0x80, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x7f, 0xf0, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3f, 0xe0, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3f, 0xe0, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x7f, 0xf0, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xff, 0xf8, 0x01, 0x80, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x00, 0x03, 0xc0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x00, 0x03, 0xc0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x00, 0x3f, 0xfc, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      };
      // '[크기변환]눈', 128x64px
      const unsigned char snow [] PROGMEM = {
        0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xfe, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xf0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xe0, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0xc0, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x80, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1f, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1e, 0x00, 0x00, 0x07, 0x87, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      };
      // '[크기변환]소나기', 128x64px
      const unsigned char shower [] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xf8, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0xc0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x80, 0x07, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0x00, 0x03, 0x9f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0e, 0x00, 0x03, 0xff, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1c, 0x00, 0x01, 0xf8, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1c, 0x00, 0x01, 0xf0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1c, 0x00, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x18, 0x00, 0x00, 0xc0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x00, 0x70, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x07, 0x00, 0x70, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0e, 0x00, 0x60, 0xff, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0e, 0x00, 0xe0, 0xff, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0c, 0x00, 0xe0, 0xff, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0xfc, 0x0e, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x80, 0x19, 0xfe, 0x1e, 0x18, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x80, 0x39, 0xfe, 0x3c, 0x38, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x80, 0x38, 0x1c, 0x78, 0x38, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x07, 0x00, 0x70, 0x1c, 0xf0, 0x70, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x20, 0x1c, 0xe0, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0c, 0x00, 0x3b, 0x8c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x0e, 0x00, 0x3f, 0x8e, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1c, 0x00, 0x3f, 0x1c, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x1c, 0x00, 0x7e, 0x1c, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x18, 0x00, 0x7c, 0x18, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
      };

      // Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 7280)
      const int weatherallArray_LEN = 7;
      const unsigned char* weatherallArray[7] = {
        suuny,
        cloudy,
        fog,
        rain,
        rainsnow,
        snow,
        shower
      };
      `

      Blockly.JavaScript.setups_['oled_setup'] =
      `display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
      display.clearDisplay();\n
      `
      var data = ''
        if(weather == '맑음'){
            data = "weatherallArray[0]"
        }else if(weather == '구름많음'){
            data = "weatherallArray[1]"
        }else if(weather == '흐림'){
            data = "weatherallArray[2]"
        }else if(weather == '비'){
            data = "weatherallArray[3]"
        }else if(weather == '비/눈'){
             data = "weatherallArray[4]"
         }else if(weather == '눈'){
             data = "weatherallArray[5]"
         }else if(weather == '소나기'){
             data = "weatherallArray[6]"
         }


     var code =
       `display.drawBitmap(32, 0, `+ data+ `, 128, 64, WHITE);
        display.display();`

      return code;

     };


      Blockly.JavaScript['Adafruit_SSD1306'] = function(block){


      Blockly.JavaScript.definitions_['ssd1306_define'] =
      `#include <SPI.h>
       #include <Wire.h>
       #include <Adafruit_GFX.h>
       #include <Adafruit_SSD1306.h>

       #define SCREEN_WIDTH 128 // OLED display width, in pixels
       #define SCREEN_HEIGHT 32 // OLED display height, in pixels

       // Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
       // The pins for I2C are defined by the Wire-library.
       // On an arduino UNO:       A4(SDA), A5(SCL)
       // On an arduino MEGA 2560: 20(SDA), 21(SCL)
       // On an arduino LEONARDO:   2(SDA),  3(SCL), ...
       #define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
       #define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
       Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

       #define NUMFLAKES     10 // Number of snowflakes in the animation example

       #define LOGO_HEIGHT   16
       #define LOGO_WIDTH    16
       static const unsigned char PROGMEM logo_bmp[] =
       { 0b00000000, 0b11000000,
         0b00000001, 0b11000000,
         0b00000001, 0b11000000,
         0b00000011, 0b11100000,
         0b11110011, 0b11100000,
         0b11111110, 0b11111000,
         0b01111110, 0b11111111,
         0b00110011, 0b10011111,
         0b00011111, 0b11111100,
         0b00001101, 0b01110000,
         0b00011011, 0b10100000,
         0b00111111, 0b11100000,
         0b00111111, 0b11110000,
         0b01111100, 0b11110000,
         0b01110000, 0b01110000,
         0b00000000, 0b00110000 };
`


    Blockly.JavaScript.setups_['ssd1306_setting'] =
     `  Serial.begin(9600);

         // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
         if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
           Serial.println(F("SSD1306 allocation failed"));
           for(;;); // Don't proceed, loop forever
         }

         // Show initial display buffer contents on the screen --
         // the library initializes this with an Adafruit splash screen.
         display.display();
         delay(2000); // Pause for 2 seconds

         // Clear the buffer
         display.clearDisplay();

         // Draw a single pixel in white
         display.drawPixel(10, 10, SSD1306_WHITE);

         // Show the display buffer on the screen. You MUST call display() after
         // drawing commands to make them visible on screen!
         display.display();
         delay(2000);
         // display.display() is NOT necessary after every single drawing command,
         // unless that's what you want...rather, you can batch up a bunch of
         // drawing operations and then update the screen all at once by calling
         // display.display(). These examples demonstrate both approaches...

         testdrawline();      // Draw many lines

         testdrawrect();      // Draw rectangles (outlines)

         testfillrect();      // Draw rectangles (filled)

         testdrawcircle();    // Draw circles (outlines)

         testfillcircle();    // Draw circles (filled)

         testdrawroundrect(); // Draw rounded rectangles (outlines)

         testfillroundrect(); // Draw rounded rectangles (filled)

         testdrawtriangle();  // Draw triangles (outlines)

         testfilltriangle();  // Draw triangles (filled)

         testdrawchar();      // Draw characters of the default font

         testdrawstyles();    // Draw 'stylized' characters

         testscrolltext();    // Draw scrolling text

         testdrawbitmap();    // Draw a small bitmap image

         // Invert and restore display, pausing in-between
         display.invertDisplay(true);
         delay(1000);
         display.invertDisplay(false);
         delay(1000);

         testanimate(logo_bmp, LOGO_WIDTH, LOGO_HEIGHT); // Animate bitmaps`

        Blockly.JavaScript.definitions_['ssd1306_define2'] =
        `void testdrawline() {
           int16_t i;

           display.clearDisplay(); // Clear display buffer

           for(i=0; i<display.width(); i+=4) {
             display.drawLine(0, 0, i, display.height()-1, SSD1306_WHITE);
             display.display(); // Update screen with each newly-drawn line
             delay(1);
           }
           for(i=0; i<display.height(); i+=4) {
             display.drawLine(0, 0, display.width()-1, i, SSD1306_WHITE);
             display.display();
             delay(1);
           }
           delay(250);

           display.clearDisplay();

           for(i=0; i<display.width(); i+=4) {
             display.drawLine(0, display.height()-1, i, 0, SSD1306_WHITE);
             display.display();
             delay(1);
           }
           for(i=display.height()-1; i>=0; i-=4) {
             display.drawLine(0, display.height()-1, display.width()-1, i, SSD1306_WHITE);
             display.display();
             delay(1);
           }
           delay(250);

           display.clearDisplay();

           for(i=display.width()-1; i>=0; i-=4) {
             display.drawLine(display.width()-1, display.height()-1, i, 0, SSD1306_WHITE);
             display.display();
             delay(1);
           }
           for(i=display.height()-1; i>=0; i-=4) {
             display.drawLine(display.width()-1, display.height()-1, 0, i, SSD1306_WHITE);
             display.display();
             delay(1);
           }
           delay(250);

           display.clearDisplay();

           for(i=0; i<display.height(); i+=4) {
             display.drawLine(display.width()-1, 0, 0, i, SSD1306_WHITE);
             display.display();
             delay(1);
           }
           for(i=0; i<display.width(); i+=4) {
             display.drawLine(display.width()-1, 0, i, display.height()-1, SSD1306_WHITE);
             display.display();
             delay(1);
           }

           delay(2000); // Pause for 2 seconds
         }

         void testdrawrect(void) {
           display.clearDisplay();

           for(int16_t i=0; i<display.height()/2; i+=2) {
             display.drawRect(i, i, display.width()-2*i, display.height()-2*i, SSD1306_WHITE);
             display.display(); // Update screen with each newly-drawn rectangle
             delay(1);
           }

           delay(2000);
         }

         void testfillrect(void) {
           display.clearDisplay();

           for(int16_t i=0; i<display.height()/2; i+=3) {
             // The INVERSE color is used so rectangles alternate white/black
             display.fillRect(i, i, display.width()-i*2, display.height()-i*2, SSD1306_INVERSE);
             display.display(); // Update screen with each newly-drawn rectangle
             delay(1);
           }

           delay(2000);
         }

         void testdrawcircle(void) {
           display.clearDisplay();

           for(int16_t i=0; i<max(display.width(),display.height())/2; i+=2) {
             display.drawCircle(display.width()/2, display.height()/2, i, SSD1306_WHITE);
             display.display();
             delay(1);
           }

           delay(2000);
         }

         void testfillcircle(void) {
           display.clearDisplay();

           for(int16_t i=max(display.width(),display.height())/2; i>0; i-=3) {
             // The INVERSE color is used so circles alternate white/black
             display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
             display.display(); // Update screen with each newly-drawn circle
             delay(1);
           }

           delay(2000);
         }

         void testdrawroundrect(void) {
           display.clearDisplay();

           for(int16_t i=0; i<display.height()/2-2; i+=2) {
             display.drawRoundRect(i, i, display.width()-2*i, display.height()-2*i,
               display.height()/4, SSD1306_WHITE);
             display.display();
             delay(1);
           }

           delay(2000);
         }

         void testfillroundrect(void) {
           display.clearDisplay();

           for(int16_t i=0; i<display.height()/2-2; i+=2) {
             // The INVERSE color is used so round-rects alternate white/black
             display.fillRoundRect(i, i, display.width()-2*i, display.height()-2*i,
               display.height()/4, SSD1306_INVERSE);
             display.display();
             delay(1);
           }

           delay(2000);
         }

         void testdrawtriangle(void) {
           display.clearDisplay();

           for(int16_t i=0; i<max(display.width(),display.height())/2; i+=5) {
             display.drawTriangle(
               display.width()/2  , display.height()/2-i,
               display.width()/2-i, display.height()/2+i,
               display.width()/2+i, display.height()/2+i, SSD1306_WHITE);
             display.display();
             delay(1);
           }

           delay(2000);
         }

         void testfilltriangle(void) {
           display.clearDisplay();

           for(int16_t i=max(display.width(),display.height())/2; i>0; i-=5) {
             // The INVERSE color is used so triangles alternate white/black
             display.fillTriangle(
               display.width()/2  , display.height()/2-i,
               display.width()/2-i, display.height()/2+i,
               display.width()/2+i, display.height()/2+i, SSD1306_INVERSE);
             display.display();
             delay(1);
           }

           delay(2000);
         }

         void testdrawchar(void) {
           display.clearDisplay();

           display.setTextSize(1);      // Normal 1:1 pixel scale
           display.setTextColor(SSD1306_WHITE); // Draw white text
           display.setCursor(0, 0);     // Start at top-left corner
           display.cp437(true);         // Use full 256 char 'Code Page 437' font

           // Not all the characters will fit on the display. This is normal.
           // Library will draw what it can and the rest will be clipped.
           for(int16_t i=0; i<256; i++) {
             if(i == '\\n') display.write(' ');
             else          display.write(i);
           }

           display.display();
           delay(2000);
         }

         void testdrawstyles(void) {
           display.clearDisplay();

           display.setTextSize(1);             // Normal 1:1 pixel scale
           display.setTextColor(SSD1306_WHITE);        // Draw white text
           display.setCursor(0,0);             // Start at top-left corner
           display.println(F(\"Hello, world!\"));

           display.setTextColor(SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
           display.println(3.141592);

           display.setTextSize(2);             // Draw 2X-scale text
           display.setTextColor(SSD1306_WHITE);
           display.print(F("0x")); display.println(0xDEADBEEF, HEX);

           display.display();
           delay(2000);
         }

         void testscrolltext(void) {
           display.clearDisplay();

           display.setTextSize(2); // Draw 2X-scale text
           display.setTextColor(SSD1306_WHITE);
           display.setCursor(10, 0);
           display.println(F("scroll"));
           display.display();      // Show initial text
           delay(100);

           // Scroll in various directions, pausing in-between:
           display.startscrollright(0x00, 0x0F);
           delay(2000);
           display.stopscroll();
           delay(1000);
           display.startscrollleft(0x00, 0x0F);
           delay(2000);
           display.stopscroll();
           delay(1000);
           display.startscrolldiagright(0x00, 0x07);
           delay(2000);
           display.startscrolldiagleft(0x00, 0x07);
           delay(2000);
           display.stopscroll();
           delay(1000);
         }

         void testdrawbitmap(void) {
           display.clearDisplay();

           display.drawBitmap(
             (display.width()  - LOGO_WIDTH ) / 2,
             (display.height() - LOGO_HEIGHT) / 2,
             logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
           display.display();
           delay(1000);
         }

         #define XPOS   0 // Indexes into the 'icons' array in function below
         #define YPOS   1
         #define DELTAY 2

         void testanimate(const uint8_t *bitmap, uint8_t w, uint8_t h) {
           int8_t f, icons[NUMFLAKES][3];

           // Initialize 'snowflake' positions
           for(f=0; f< NUMFLAKES; f++) {
             icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
             icons[f][YPOS]   = -LOGO_HEIGHT;
             icons[f][DELTAY] = random(1, 6);
             Serial.print(F("x: "));
             Serial.print(icons[f][XPOS], DEC);
             Serial.print(F(" y: "));
             Serial.print(icons[f][YPOS], DEC);
             Serial.print(F(" dy: "));
             Serial.println(icons[f][DELTAY], DEC);
           }

           for(;;) { // Loop forever...
             display.clearDisplay(); // Clear the display buffer

             // Draw each snowflake:
             for(f=0; f< NUMFLAKES; f++) {
               display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SSD1306_WHITE);
             }

             display.display(); // Show the display buffer on the screen
             delay(200);        // Pause for 1/10 second

             // Then update coordinates of each flake...
             for(f=0; f< NUMFLAKES; f++) {
               icons[f][YPOS] += icons[f][DELTAY];
               // If snowflake is off the bottom of the screen...
               if (icons[f][YPOS] >= display.height()) {
                 // Reinitialize to a random position, just off the top
                 icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
                 icons[f][YPOS]   = -LOGO_HEIGHT;
                 icons[f][DELTAY] = random(1, 6);
               }
             }
           }
         }
         `


        return ""
      }


Blockly.JavaScript['inout_tone_pin'] = function(block) {
   var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
   var value_num = Blockly.JavaScript.valueToCode(block, "NUM", Blockly.JavaScript.ORDER_ATOMIC);
   Blockly.JavaScript.setups_['setup_output'+value_pin] = '\n pinMode('+value_pin+', OUTPUT);';
   var code = "tone(" + value_pin + ", " + value_num + ");\n";
   return code;
 };

Blockly.JavaScript['inout_notone_pin'] = function(block) {
   var dropdown_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
   Blockly.JavaScript.setups_['setup_output'+dropdown_pin] = '\n pinMode('+dropdown_pin+', OUTPUT);';
   var code = "noTone(" + dropdown_pin + ");\n";
   return code;
 };

Blockly.JavaScript['inout_digital_write'] = function(block) {
   var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
   var value_num = Blockly.JavaScript.valueToCode(block, "NUM", Blockly.JavaScript.ORDER_ATOMIC);
   var code = "digitalWrite(" + value_pin + ", " + value_num + ");\n";
   return code;
 };


Blockly.JavaScript['inout_analog_write'] = function(block) {
    var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
    var value_num = Blockly.JavaScript.valueToCode(block, "NUM", Blockly.JavaScript.ORDER_ATOMIC);
     if( (value_num < 0 ) || (value_num > 255 )) {
         return '!!alert!!Pin : analog value should be between 0 and 255!!\n';
      }
    //var code = "pinMode("+value_pin+", OUTPUT);\n analogWrite(" + value_pin + ", " + value_num + ");\n";
    var code = "analogWrite(" + value_pin + ", " + value_num + ");\n";
    return code;
  };

Blockly.JavaScript['inout_digital_read'] = function(block) {
  var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
//  Blockly.JavaScript.definitions_['digital_read'] = "int digRead(int pinNumber)\n{\n pinMode("+value_pin+", INPUT);\n return digitalRead(" + value_pin + ");\n}\n"
  var code = "digitalRead(" + value_pin + ")";
  return [code, Blockly.JavaScript.ORDER_ATOMIC];
};

Blockly.JavaScript['serial_begin_list'] = function(block) {
    //var num = parseInt(Blockly.JavaScript.valueToCode(block, 'SB',Blockly.JavaScript.ORDER_NONE));

    var dropdown_value = this.getFieldValue('SB');
    return [dropdown_value, Blockly.JavaScript.ORDER_ATOMIC];
};

//Blockly.JavaScript['number'] = function(block) {
//  // Generate JavaScript for setting the width.
////  var channel = parseInt(block.getFieldValue('channel'));
//    var num = parseInt(Blockly.JavaScript.valueToCode(block, 'num',Blockly.JavaScript.ORDER_NONE) || '255');
//
//    return num;
//};

//Blockly.JavaScript['inout_analog_read'] = function(block) {
//  var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
//  Blockly.JavaScript.definitions_['analog_read'] = "int anaRead(int pinNumber)\n{\n pinMode("+value_pin+", INPUT);\n return analogRead(" + value_pin + ");\n}\n"
//    var code = "anaRead(" + value_pin + ")";
//    return [code, Blockly.JavaScript.ORDER_ATOMIC];
//};

Blockly.JavaScript['inout_analog_read'] = function(block) {
  var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
//  Blockly.JavaScript.definitions_['analog_read'] = "int anaRead(int pinNumber)\n{\n pinMode("+value_pin+", INPUT);\n return analogRead(" + value_pin + ");\n}\n"
    var code = "analogRead(" + value_pin + ")";
   return [code, Blockly.JavaScript.ORDER_ATOMIC];
};

/*Blockly.JavaScript['serial_print'] = function(block) {
   var value_baud = Blockly.JavaScript.valueToCode(block, "baud", Blockly.JavaScript.ORDER_ATOMIC);
   var value_text = Blockly.JavaScript.valueToCode(block, "text", Blockly.JavaScript.ORDER_ATOMIC);
//   Blockly.JavaScript.setups_['setup_serial_print'] = '\n Serial.begin('+value_baud+');';
   var code = "Serial.print("+value_text+");\n";
   return code;
 };*/

 Blockly.JavaScript['variables_change'] = function() {
   // Variable setter.
   var varValue = Blockly.JavaScript.valueToCode(this, 'VALUE',
       Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';
   var varName = Blockly.JavaScript.variableDB_.getName(this.getFieldValue('VAR'),
       Blockly.Variables.NAME_TYPE);

   return varName + ' = ' + varValue + ';\n';
 };

 Blockly.JavaScript['serial_print2'] = function() {
     var varValue = Blockly.JavaScript.valueToCode(this, 'VALUE',
         Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';

     var code = "Serial.print("+varValue+");\n";

     return code;
   };

  Blockly.JavaScript['serial_println2'] = function() {
    var varValue = Blockly.JavaScript.valueToCode(this, 'VALUE',
        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';


    var code = "Serial.println("+varValue+");\n";

    return code;
  };

Blockly.JavaScript['serial_begin'] = function(block) {
    //Blockly.JavaScript.definitions_['define_DHT11_h'] = "#include <DHT.h>\n";

   var value_baud = Blockly.JavaScript.valueToCode(block, "baud", Blockly.JavaScript.ORDER_ATOMIC);
   var code = "\nSerial.begin("+value_baud+");\n";
   return code;
 };

/* Blockly.JavaScript['serial_println'] = function(block) {
    var value_baud = Blockly.JavaScript.valueToCode(block, "baud", Blockly.JavaScript.ORDER_ATOMIC);
    var value_text = Blockly.JavaScript.valueToCode(block, "text", Blockly.JavaScript.ORDER_ATOMIC);
//    Blockly.JavaScript.setups_['setup_serial_print'] = '\n Serial.begin('+value_baud+');';
    var code = "Serial.println("+value_text+");\n";
    return code;
  };*/

   Blockly.JavaScript['random_number'] = function(block) {
      var from_num = Blockly.JavaScript.valueToCode(block, "from_num", Blockly.JavaScript.ORDER_ATOMIC);
      var to_num = Blockly.JavaScript.valueToCode(block, "to_num", Blockly.JavaScript.ORDER_ATOMIC);
  //    Blockly.JavaScript.setups_['setup_serial_print'] = '\n Serial.begin('+value_baud+');';
      var code = "random("+from_num+","+to_num+");";
        return [Blockly.JavaScript.provideFunction_("mathRandomInt", ["int " + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + "(int a, int b) {", "  if (a > b) {", "    // Swap a and b to ensure a is smaller.", "    int c = a;", "    a = b;", "    b = c;", "  }", "  return random(a,b);",
              "}"
          ]) + "(" + from_num + ", " + to_num+ ")", Blockly.JavaScript.ORDER_FUNCTION_CALL]
    };

  Blockly.JavaScript['map_number'] = function(block) {

           var variable = Blockly.JavaScript.valueToCode(block, "var", Blockly.JavaScript.ORDER_ATOMIC);
           var in_min = Blockly.JavaScript.valueToCode(block, "in_min", Blockly.JavaScript.ORDER_ATOMIC);
           var in_max = Blockly.JavaScript.valueToCode(block, "in_max", Blockly.JavaScript.ORDER_ATOMIC);
           var out_min = Blockly.JavaScript.valueToCode(block, "out_min", Blockly.JavaScript.ORDER_ATOMIC);
           var out_max = Blockly.JavaScript.valueToCode(block, "out_max", Blockly.JavaScript.ORDER_ATOMIC);

//      var functionName = Blockly.JavaScript.provideFunction_(
//          'map_number',
//          [ 'int ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(int x, int in_min, int in_max, int out_min, int out_max) {',
//
//            '  return map(x,in_min,in_max,out_min,out_max);',
//            '}']);
      // Generate the function call for this block.
//      var code = functionName + '(' + variable+','+in_min +','+in_max+','+out_min +','+out_max + ')';
      var code =  'map(' + variable+','+in_min +','+in_max+','+out_min +','+out_max + ')';
      return [code, Blockly.JavaScript.ORDER_ATOMIC];
        };

/*   Blockly.JavaScript['serial_println_int'] = function(block) {
      var value_baud = Blockly.JavaScript.valueToCode(block, "baud", Blockly.JavaScript.ORDER_ATOMIC);
      var value_num = Blockly.JavaScript.valueToCode(block, "NUM", Blockly.JavaScript.ORDER_ATOMIC);
  //    Blockly.JavaScript.setups_['setup_serial_print'] = '\n Serial.begin('+value_baud+');';
      var code = "Serial.println("+value_num+");\n";
      return code;
    };*/

Blockly.JavaScript['base_pins_list'] = function() {
  var dropdown_value = this.getFieldValue('PIN');
  return [dropdown_value, Blockly.JavaScript.ORDER_ATOMIC];
};

Blockly.JavaScript['base_logic_list'] = function() {
  var dropdown_value = this.getFieldValue('LOGIC');
  return [dropdown_value, Blockly.JavaScript.ORDER_ATOMIC];
};

Blockly.JavaScript['base_local_list'] = function() {
  var dropdown_value = this.getFieldValue('LOCAL');
  return [dropdown_value, Blockly.JavaScript.ORDER_ATOMIC];
};



Blockly.JavaScript['base_output_list'] = function() {
  var dropdown_value = this.getFieldValue('LOGIC');
  return [dropdown_value, Blockly.JavaScript.ORDER_ATOMIC];
};

Blockly.JavaScript['base_delay'] = function(block) {
  var delay_time = Blockly.JavaScript.valueToCode(block, 'DELAY_TIME', Blockly.JavaScript.ORDER_ATOMIC) || '1000'
  var code = 'delay(' + delay_time + ');\n';
  return code;
};

Blockly.JavaScript['pulseIn'] = function(block) {
   var value_pin = Blockly.JavaScript.valueToCode(block, "PIN", Blockly.JavaScript.ORDER_ATOMIC);
   var value_num = Blockly.JavaScript.valueToCode(block, "NUM", Blockly.JavaScript.ORDER_ATOMIC);

   var code = "pulseIn(" + value_pin + ", " + value_num + ")";
   return [code, Blockly.JavaScript.ORDER_ATOMIC];
 };

//Blockly.JavaScript['turtle_colour_internal'] = function(block) {
//  // Generate JavaScript for setting the colour.
//  var colour = block.getFieldValue('COLOUR');
//  return 'Turtle.penColour(\'' + colour + '\', \'block_id_' +
//      block.id + '\');\n';
//};

Blockly.JavaScript['turtle_pen'] = function(block) {
  // Generate JavaScript for pen up/down.
  return 'Turtle.' + block.getFieldValue('PEN') +
      '(\'block_id_' + block.id + '\');\n';
};

Blockly.JavaScript['turtle_width'] = function(block) {
  // Generate JavaScript for setting the width.
  var width = Blockly.JavaScript.valueToCode(block, 'WIDTH',
      Blockly.JavaScript.ORDER_NONE) || '1';
  return 'Turtle.penWidth(' + width + ', \'block_id_' + block.id + '\');\n';
};

Blockly.JavaScript['turtle_visibility'] = function(block) {
  // Generate JavaScript for changing turtle visibility.
  return 'Turtle.' + block.getFieldValue('VISIBILITY') +
      '(\'block_id_' + block.id + '\');\n';
};

Blockly.JavaScript['turtle_print'] = function(block) {
  // Generate JavaScript for printing text.
  var argument0 = String(Blockly.JavaScript.valueToCode(block, 'TEXT',
      Blockly.JavaScript.ORDER_NONE) || '\'\'');
  return 'Turtle.drawPrint(' + argument0 + ', \'block_id_' +
      block.id + '\');\n';
};

Blockly.JavaScript['turtle_font'] = function(block) {
  // Generate JavaScript for setting the font.
  return 'Turtle.drawFont(\'' + block.getFieldValue('FONT') + '\',' +
      Number(block.getFieldValue('FONTSIZE')) + ',\'' +
      block.getFieldValue('FONTSTYLE') + '\', \'block_id_' +
      block.id + '\');\n';
};

Blockly.JavaScript['turtle_move'] = function(block) {
  // Generate JavaScript for moving forward or backwards.
  var value = Blockly.JavaScript.valueToCode(block, 'VALUE',
      Blockly.JavaScript.ORDER_NONE) || '0';
  return 'Turtle.' + block.getFieldValue('DIR') +
      '(' + value + ', \'block_id_' + block.id + '\');\n';
};

Blockly.JavaScript['turtle_turn'] = function(block) {
  // Generate JavaScript for turning left or right.
  var value = Blockly.JavaScript.valueToCode(block, 'VALUE',
      Blockly.JavaScript.ORDER_NONE) || '0';
  return 'Turtle.' + block.getFieldValue('DIR') +
      '(' + value + ', \'block_id_' + block.id + '\');\n';
};

Blockly.JavaScript['turtle_width'] = function(block) {
  // Generate JavaScript for setting the width.
  var width = Blockly.JavaScript.valueToCode(block, 'WIDTH',
      Blockly.JavaScript.ORDER_NONE) || '1';
  return 'Turtle.penWidth(' + width + ', \'block_id_' + block.id + '\');\n';
};

Blockly.JavaScript['turtle_colour'] = function(block) {
  // Generate JavaScript for setting the colour.
  var colour = Blockly.JavaScript.valueToCode(block, 'COLOUR',
      Blockly.JavaScript.ORDER_NONE) || '\'#000000\'';
     Blockly.JavaScript.definitions_["%1"] = "var hello var hi;"
     Blockly.JavaScript.definitions_["%2"] = "iiiiiiiiiiiiiii"
  return 'Turtle.penColour(' + colour + ', \'block_id_' +
      block.id + '\');\n';
};

Blockly.JavaScript['turtle_repeat_internal'] = Blockly.JavaScript['controls_repeat'];

Blockly.JavaScript['turtle_setup_loop'] = Blockly.JavaScript['setup_loop'];

/**
 * The generated code for turtle blocks includes block ID strings.  These are useful for
 * highlighting the currently running block, but that behaviour is not supported in Android Blockly
 * as of May 2016.  This snippet generates the block code normally, then strips out the block IDs
 * for readability when displaying the code to the user.
 *
 * Post-processing the block code in this way allows us to use the same generators for the Android
 * and web versions of the turtle.
 */
Blockly.JavaScript.workspaceToCodeWithId = Blockly.JavaScript.workspaceToCode;

Blockly.JavaScript.workspaceToCode = function(workspace) {
  var code = this.workspaceToCodeWithId(workspace);
  // Strip out block IDs for readability.
  code = goog.string.trimRight(code.replace(/(,\s*)?'block_id_[^']+'\)/g, ')'))
  return code;
};